//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ashchauhan/Desktop/SampleApp/OnePoint/Runtime/Common/IOM/Question.java
//
//  Created by ashchauhan on 6/20/14.
//

//#ifndef _Question_H_
//#define _Question_H_

#import <Foundation/Foundation.h>

@class Interview;
@protocol ICategories;
@protocol ILabel;
@protocol ILabels;
@protocol IObjects;
@protocol IQuestion;
@protocol IQuestionInfo;
@protocol IQuestions;
@protocol IValidation;
@protocol IStyle;
@protocol ISavePoint;
@class Handler;
@protocol ICategory;
#import "OrderConstants.h"
#import "NavigationTypes.h"
#import "DataTypeConstants.h"
#import "QuestionTypes.h"
#import "MediaTypes.h"
#import "IOMIResponse.h"

@interface OPGQuestion : NSObject<IQuestion> {
 @public
  id<IQuestions> _temporaryquestions;
  NSString *_json;
  NSString *_bannertemplate;
  id<ILabels> _banners;
  id<ICategories> _categories;
  id<ICategories> _codes;
  int _count;
  NSString *_dbfilter;
  NSString *_errortemplate;
  id<ILabels> _errors;
  BOOL _exclusive;
  id<IQuestionInfo> _info;
  BOOL _isdbquestion;
  BOOL _isdefine;
  id<IQuestions> _item;
  id<ILabel> _label;
  NSString *_layouttemplate;
  BOOL _mustanswer;
  NSString *_navbartemplate;
  id<IObjects> _othercategories;
  id<IQuestion> _parentquestion;
  long long int _precision;
  id _properties;
  id _questionfilter;
  NSString *_questionfullname;
  NSString *_questionname;
  NSString *_questiontemplate;
  id<IOMIResponse> _response;
  int _scale;
  id<IValidation> _validation;
  id<IStyle> _style;
  BOOL _issublist;
   DataTypeConstants _questiondatatype;
    OrderConstants _questionorder;
    QuestionTypes _questiontype;
    MediaTypes _mediatype;
    NSString *_filter;
    BOOL _isgrid;
    long _variableid;
    BOOL _isexpand;
    BOOL _nocasedata;
    id<ILabel> _gotolabel;
    id _defaultproperty;
    id<ICategory> _parentcategory;
    id<ISavePoint> _savepoint;
}


- (id)initWithInterview:(Interview *)ainterview;
- (id)initWithInterview:(Interview *)interview
          withIQuestion:(id<IQuestion>)parent
                                   withNSString:(NSString *)questionName
                                   withNSString:(NSString *)properties;


- (id)initWithInterview:(Interview *)ainterview
          withIQuestion:(id<IQuestion>)aparent withCategory:(id<ICategory>)category
                 withId:(id)ajson
           withNSString:(NSString *)alabel
            withBoolean:(BOOL)aisOther
           withNSString:(NSString *)aname;
- (id)initWithInterview:(Interview *)interview
          withIQuestion:(id<IQuestion>)parent
                 withId:(id)json;
//- (id)initWithInterview:(Interview *)interview
//          withIQuestion:(id<IQuestion>)parent
//                 withId:(id)json
//           withNSString:(NSString *)label;
- (id)initWithInterview:(Interview *)interview
          withIQuestion:(id<IQuestion>)parent
                 withId:(id)json
           withNSString:(NSString *)label
            withBoolean:(BOOL)isOther;

- (NSString *)getJson;
- (void)setJson:(NSString *)value;
- (NSString *)getBannerTemplate;
- (void)setBannerTemplate:(NSString *)value;
- (id<ILabels>)getBanners;
- (void)setBannersWithILabels:(id<ILabels>)value;
- (id<ICategories>)getcategories;
- (void)setcategories:(id<ICategories>)value;
- (id<ICategories>)getCodes;
- (void)setCodes:(id<ICategories>)value;
- (int)getCount;
- (void)setCount:(int)value;
- (NSString *)getDBFilter;
- (void)setDBFilter:(NSString *)value;
- (NSString *)getErrorTemplate;
- (void)setErrorTemplate:(NSString *)value;
- (id<ILabels>)getErrors;
- (void)setErrors:(id<ILabels>)value;
- (BOOL)getExclusive;
- (void)setExclusive:(BOOL)value;
- (id<IQuestionInfo>)getInfo;
- (void)setInfo:(id<IQuestionInfo>)value;
- (BOOL)getIsDBQuestion;
- (void)setIsDBQuestionWithBoolean:(BOOL)value;
- (BOOL)getIsDefine;
- (void)setIsDefine:(BOOL)value;
- (id<IQuestions>)getItem;
- (void)setItem:(id<IQuestions>)value;
- (id<ILabel>)getLabel;
- (void)setLabel:(id<ILabel>)value;

-(id<ILabel>)getGotoLabel;
-(void)setGotoLabel:(id<ILabel>)value;
- (NSString *)getLayoutTemplate;
- (void)setLayoutTemplate:(NSString *)value;
- (BOOL)getMustAnswer;
- (void)setMustAnswer:(BOOL)value;
- (NSString *)getNavBarTemplate;
- (void)setNavBarTemplate:(NSString *)value;
- (id<IObjects>)getOtherCategories;
- (void)setOtherCategories:(id<IObjects>)value;
- (id<IQuestion>)getParentQuestion;
- (void)setParentQuestion:(id<IQuestion>)value;
- (id<ICategory>)getparentcategory;
- (void)setparentcategory:(id<ICategory>)value;
- (long long int)getPrecision;
- (void)setPrecision:(long long int)value;
- (id)getquestionfilter;
- (void)setquestionfilter:(id)value;
- (NSString *)getQuestionFullName;
- (void)setQuestionFullName:(NSString *)value;
- (NSString *)getQuestionName;
- (void)setQuestionName:(NSString *)value;
- (NSString *)getQuestionTemplate;
- (void)setQuestionTemplate:(NSString *)value;
- (id<IOMIResponse>)getResponse;
- (void)setResponse:(id<IOMIResponse>)value;
- (int)getScale;
- (void)setScale:(int)value;
- (id<IValidation>)getValidation;
- (void)setValidation:(id<IValidation>)value;
- (BOOL)getIsErrorBlock;
+ (id<IQuestion>)standardMessages;
- (void)ask:(Handler*)handler;
- (NSString *)buildDBFilter:(NSString *)fieldName;
- (void)clearOffPathResponse;
- (void)delete__WithId:(id)index;
- (BOOL)existsWithId:(id)index;
- (void)preserve;
- (void)showWithId:(id)handler;
- (id)showWithId:(id)handler withNSMutableData:(NSMutableData *)args;
- (void)clearResponses;
- (NSString *)description;
- (BOOL)getIsSubList;
- (void)setIsSubList:(BOOL)value;
- (void)checkSaveNavigation:(id)handler;
- (void)buildQuestion:(Interview *)interview withId:(id)json withNSString:(NSString *)label
                            withBoolean:(BOOL)isOther withNSString:(NSString *)name;
- (void)buildQuestion:(Interview *)interview withId:(id)json withNSString:(NSString *)label
          withBoolean:(BOOL)isOther;
- (id)findProperty:(id)json withNSString:(NSString *)fieldName;
- (void)processBlock:(Interview *)interview withId:(id)json;
- (void)processFields:(Interview *)interview withId:(id)json withIQuestion:(id<IQuestion>)question;
- (void)processProperties:(Interview *)interview withId:(id)json;
- (void)processIndividualProperties:(Interview *)interview  withId:(id)category;
- (void)checkStyle:(id)style;
- (void)show:(Handler*)handler withId:(id)args;
- (void)show:(Handler*)handler;
-(id)getenumerator:(id)parameter;
-(id)getenumerator;

@end
