// --------------------------------------------------------------------------------------------------------------------
// <copyright file="model.cs" company="OnePoint Global">
//   Copyright (c) 2012 OnePoint Global Ltd. All rights reserved.
// </copyright>
// <summary>
//   This file was autogenerated and you should not edit it. It will be 
//   regenerated whenever the schema changes.
//   All changes should be made in AppNotification.cs and the mode.xml. 
// </summary>
// --------------------------------------------------------------------------------------------------------------------


#import <Foundation/Foundation.h>
#import <OnePointFramework/DataObjectFactory.h>
#import "IAppNotificationData.h"
#import "IAppNotificationFactoryBase.h"

//package OnePoint.PROM.Model; 
  

/// <summary>
/// Creates and finds AppNotification objects
/// </summary>



@interface  AppNotificationFactoryBase : DataObjectFactory<IAppNotificationData,IAppNotificationFactoryBase>
{
}

+(NSString*)  FIELD_NAME_APPNOTIFICATIONID;
+(NSString*)  FIELD_NAME_TITLE;
+(NSString*)  FIELD_NAME_BODY;
+(NSString*)  FIELD_NAME_LASTUPDATED;
+(NSString*)  FIELD_NAME_ISREAD;
+(NSString*)  FIELD_NAME_TYPE;
+(NSString*) PARAMETER_NAME_APPNOTIFICATIONID;
+(NSString*) PARAMETER_NAME_TITLE;
+(NSString*) PARAMETER_NAME_BODY;
+(NSString*) PARAMETER_NAME_LASTUPDATED;
+(NSString*) PARAMETER_NAME_ISREAD;
+(NSString*) PARAMETER_NAME_TYPE;

/// <summary>
/// The Microsoft SQL statement to join one table to another and perform it.
/// </summary>
-(BOOL) DeleteByPk :(NSNumber *) keyAppNotificationID ;
//-(BOOL) DeleteByPk:(NSNumber *) keyAppNotificationID;
// Define input parameters once only so they can be reused by other methods
-(void) AddAppNotificationIDParameter:(DataHandler *) dataHandler valAppNotificationID:(NSNumber *) valAppNotificationID;	

-(void) AddTitleParameter:(DataHandler *) dataHandler valTitle:(NSString *) valTitle;	

-(void) AddBodyParameter:(DataHandler *) dataHandler valBody:(NSString *) valBody;	

-(void) AddLastUpdatedParameter:(DataHandler *) dataHandler valLastUpdated: (NSDate *) valLastUpdated;	

-(void) AddIsReadParameter:(DataHandler *) dataHandler valIsRead:(NSNumber *) valIsRead;	

-(void) AddTypeParameter:(DataHandler *) dataHandler valType:(NSNumber *) valType;	

-(BOOL) ProcessPkStatement :(NSNumber *) keyAppNotificationID   query:(NSString *) query;
//-(BOOL) ProcessPkStatement:(NSNumber *) keyAppNotificationID query:(NSString *) query;

-(id<IAppNotificationData>) Find:(NSString *) attributeName attributeValue:(id) attributeValue;

-(id<IAppNotificationData>) FindByAppNotificationID:(NSNumber *) fieldValue;
-(id<IAppNotificationData>) FindByTitle:(NSString *) fieldValue; 
-(id<IAppNotificationData>) FindByBody:(NSString *) fieldValue; 
-(id<IAppNotificationData>) FindByLastUpdated:(NSDate *) fieldValue;  
-(id<IAppNotificationData>) FindByIsRead:(NSNumber *) fieldValue;
-(id<IAppNotificationData>) FindByType:(NSNumber *) fieldValue;
-(void) AppendSqlParameters:(DataHandler *) dataHandler dataObject:(DataObject *)dataObject mode:(DataMode *) mode;      
-(id<IAppNotificationData>) FindObject :(NSNumber *) keyAppNotificationID ;
        
-(id<IAppNotificationData>) Find:(DataHandler *) dataHandler;
        
-(id<IAppNotificationData>) FindAllObjects;

-(id<IAppNotificationData>) FindAllObjects:(NSString *) orderByField;

-(id<IAppNotificationData>) FindAllObjects:(NSString *) orderByField resultLimit:(int)resultLimit;	

-(id<IAppNotificationData>) CreateAppNotification:(id<IDataReader>) reader;
		
-(id<IAppNotificationData>) createObjectFromDataReader:(id<IDataReader>) reader withPopulate:(BOOL)populateRelatedObject;

-(id<IAppNotificationData>) Build:(DataHandler *) currentDataHandler closeConnection:(BOOL)closeConnection;
       
@end